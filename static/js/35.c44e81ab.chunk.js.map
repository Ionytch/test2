{"version":3,"file":"static/js/35.c44e81ab.chunk.js","mappings":"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","sources":["components/contacts/Contact.js","components/contacts/Contacts.js","components/filter/Filter.js","redux/selectors.js","components/phonebook/Phonebook.js","pages/PhoneContacts.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/operations\";\n\n\nexport const Contact = ({ name }) => {\n     \n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteContact(name.id));\n\n    return (<>\n        <p>{name.name}:{name.number}</p>\n                               \n                <button type=\"button\" onClick={handleDelete}>DELETE</button>\n    </>)\n}","import { Contact } from \"./Contact\"\n\n\nconst Contacts = ({ names }) => {\n        return (\n            <ul>\n                   {\n                       names.map(name => (\n                           <li key={name.id}>\n                               <Contact name={name} />\n                            </li>))}\n            </ul>\n        )\n    \n}\n\nexport default Contacts\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n// import { setFilter } from \"redux/actions\";\nimport { setContactsFilter } from \"redux/filterSlice\";\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n      const [filter, setFilter] = useState('');\n    const changeFilter = e => {\n\n        // e.preventDefault();\n        // const form = e.target;\n        console.log(e.currentTarget.value);\n        setFilter(e.currentTarget.value.toLowerCase())\n        dispatch(setContactsFilter(e.currentTarget.value));\n\n        // onSubmit({ name, number });\n        //   dispatch(addContact(form.elements.name.value));\n        // form.reset();\n    \n    };\n\n    return (<div>\n        <h2>filter</h2>\n        <form>\n            <label for=\"filter\">\n                find contacts by name\n            </label>\n            <input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={changeFilter}\n                \n            ></input>\n                </form>  \n        </div>\n       \n    )\n}","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter.value;","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { addContact } from \"redux/actions\";\n// import { addContact } from \"redux/contactSlice\";\nimport { addContact } from \"redux/operations\";\nimport { selectContacts } from \"redux/selectors\";\n\nexport const Phonebook = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    console.log(contacts);\n\n    const doesContactExist = newName => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === newName.toLowerCase()\n    );\n  };\n  \n    const handleSubmit = e => {\n        e.preventDefault();\n        const form = e.target;       \n        console.log(e.target.elements.number);\n        console.log(name, number);\n\n        if (doesContactExist(form.elements.name.value))\n        {\n            alert(\n                `user ${name} is already in the contact list`\n            );\n            return;\n}\n\n        // dispatch(addContact({ name: form.elements.name.value, number: form.elements.number.value }));\n        dispatch(addContact({ name, number}));\n        \n        setName('');\n        setNumber('');\n        // form.reset();\n    \n    };\n\n    \n\n        return (<div>\n            <h2>PHONEBOOK</h2>\n            <form onSubmit={handleSubmit}>\n                <label for=\"name\">\n                    NAME\n                </label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    value={name}\n                    onChange={e => setName(e.target.value)}\n                    required\n                ></input>\n                <label for=\"number\">\n                    TEL NUMBER\n                </label>\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    value={number}\n                    onChange={e => setNumber(e.target.value)}\n                    required\n                ></input>\n                <button type=\"submit\">ADD CONTACT</button>\n\n            </form>\n        </div>\n       \n        )\n    \n}\n\n// export default Phonebook\n\n// onSubmit={this.handleSubmit}","import Contacts from \"components/contacts/Contacts\";\nimport { Filter } from \"components/filter/Filter\";\nimport { Phonebook } from \"components/phonebook/Phonebook\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/operations\";\nimport { selectFilterValue } from \"redux/selectors\";\n\nconst PhoneContacts = () => {\n\n    const dispatch = useDispatch();\n \n  const contacts = useSelector(state => state.contacts.items);\n  const filtered=useSelector(selectFilterValue);\n  \n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n        \n   const filteredContacts = () => {\n    \n     return contacts.filter(contact => \n         contact.name.toLowerCase().includes(filtered.toLowerCase())\n         \n    );\n  };\n\n\n    return (\n        // <>\n        //     <div>contacts somwhere here</div>\n            \n        // </>\n        <div\n        style={{\n          display: 'flex',\n          flexDirection:'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 40,\n          color: '#010101'\n        }}\n      >\n        <Phonebook  />\n            <Filter />\n        {contacts.length > 0 ? (\n          <Contacts\n            names={filteredContacts()}\n                      />\n        ) : (\n          <span text=\"Contact list is empty.\"> \"Contact list is empty.\"</span>\n        )}\n        \n        </div>\n        \n    );\n};\nexport default PhoneContacts;"],"names":["Contact","_ref","name","dispatch","useDispatch","_jsxs","_Fragment","children","number","_jsx","type","onClick","deleteContact","id","names","map","Filter","_useState","useState","_useState2","_slicedToArray","filter","setFilter","for","value","onChange","e","console","log","currentTarget","toLowerCase","setContactsFilter","selectContacts","state","contacts","items","selectFilterValue","Phonebook","setName","_useState3","_useState4","setNumber","useSelector","onSubmit","preventDefault","newName","form","target","elements","some","contact","alert","concat","addContact","title","required","filtered","useEffect","fetchContacts","style","display","flexDirection","justifyContent","alignItems","fontSize","color","length","Contacts","includes","text"],"sourceRoot":""}